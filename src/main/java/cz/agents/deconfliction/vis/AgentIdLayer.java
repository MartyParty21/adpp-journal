package cz.agents.deconfliction.vis;import java.awt.BasicStroke;import java.awt.Color;import java.awt.Graphics2D;import cz.agents.alite.vis.Vis;import cz.agents.alite.vis.layer.AbstractLayer;import cz.agents.alite.vis.layer.VisLayer;import cz.agents.alite.vis.layer.toggle.KeyToggleLayer;import cz.agents.deconfliction.environment.storage.AirplaneStorage;public class AgentIdLayer extends AbstractLayer {    protected AirplaneStorage storage;    protected int strokeWidth;    protected Color color;    AgentIdLayer(AirplaneStorage storage, Color color, int strokeWidth) {        this.storage = storage;        this.color = color;        this.strokeWidth = strokeWidth;    }    @Override    public void paint(Graphics2D canvas) {        canvas.setStroke(new BasicStroke(strokeWidth));        canvas.setColor(color);        for (String airplaneName: storage.getAirplanes().keySet()) {            canvas.setStroke(new BasicStroke(strokeWidth));            canvas.setColor(color);            int x = 10 + Vis.transX(storage.getAirplanes().get(airplaneName).currentPositionDirection.x);            int y = Vis.transY(storage.getAirplanes().get(airplaneName).currentPositionDirection.y);            canvas.drawString(airplaneName, x, y);        }    }    @Override    public String getLayerDescription() {        String description = "Layer shows ids of the graph nodes.";        return buildLayersDescription(description);    }    public static VisLayer create(final AirplaneStorage storage, Color color, int strokeWidth, String toggleKey) {        KeyToggleLayer toggle = KeyToggleLayer.create(toggleKey);        toggle.addSubLayer(new AgentIdLayer(storage, color, strokeWidth));        toggle.setEnabled(true);        return toggle;    }}